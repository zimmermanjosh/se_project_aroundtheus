!function(){"use strict";const e=document.querySelector("#profile-edit-modal"),t=document.querySelector("#profile-edit-button"),s=document.querySelector("#title-input"),n=document.querySelector("#profile-input"),r=e.querySelector("#profile-edit-form"),o=document.querySelector("#element-add-modal"),i=(document.querySelector("#element-image-modal"),document.querySelector("#profile-add-button")),a=(document.querySelector(".elements__list"),o.querySelector(".modal__form")),l={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class c{constructor(e,t,s,n,r,o,i,a,l,c){this._name=e,this._link=t,this.isLiked=s,this._likes=n,this.cardId=r,this._userId=o,this._cardSelector=i,this._handleCardClick=a,this._handleDeleteButton=l,this._handleLikeButton=c}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleCardClick(this._getData())})),this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeButton(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteButton(this)}))}_showCardLikes(){this._cardLikeCounter.textContent=this._likes.length,this.cardIsLiked?this._cardLikeButton.classList.add("cards__like-button_active"):this._cardLikeButton.classList.remove("cards__like-button_active")}_renderLikes(){this.isLiked?this._cardLikeButton.classList.add("cards__like-button_active"):this._cardLikeButton.classList.remove("cards__like-button_active")}updateLikes(e){this.isLiked=e,this._renderLikes()}_handleLikeButton(){this._cardElement.querySelector(".element__like-button").classList.toggle("element__like-button_active")}_handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}handleDeleteCard(){this._element.remove()}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".elements__content").cloneNode(!0)}_getData(){return{name:this._name,link:this._link}}generateCard(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".element__img"),this._cardLikeButton=this._cardElement.querySelector(".element__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".element__delete-button"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".element__text").textContent=this._name,this._setEventListeners(),this._cardElement}}class d{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_enableButtonState(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_disableButtonState(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}toggleButtonState(){this._hasInvalidInput(this._input)?this._disableButtonState():this._enableButtonState()}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class h{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeByEscapeButton=this._closeByEscapeButton.bind(this)}open(){console.log("open popup!!!!"),this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._closeByEscapeButton)}close(){console.log("close popup!!!!"),this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._closeByEscapeButton)}_closeByEscapeButton=e=>{"Escape"===e.key&&(console.log("escape popup!!!!"),this.close())};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal__close")||e.target===this._popupElement)&&this.close()}))}_closeClickOutside=e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button"))&&this.close(e.currentTarget)}}class u extends h{constructor(e,t){super({popupSelector:e}),this._formElement=this._popupElement.querySelector(".modal__form"),this._formInputs=this._formElement.querySelectorAll(".modal__input"),this._saveButton=this._formElement.querySelector(".modal__button"),this._handleFormSubmit=t}close(){console.log("close popup w/form !!!!"),this._formElement.reset(),super.close()}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}_submitForm=e=>{e.preventDefault(),console.log("popup w/form -- submit e !!!!",e);const t=this._getInputValues();this._handleFormSubmit(t)};setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",this._submitForm)}renderLoading(e,t){this._saveButton.textContent=e?"Saving...":t}}class _{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}clearItems(){for(;this._container.firstChild;)this._container.removeChild(this._container.firstChild)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const m=new class{constructor(e){let{baseUrl:t,baseHeader:s}=e;this._baseUrl=t,this._baseHeader=s}clearAllCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._baseHeader}).then(this._checkRequest)}getInitialCards(e){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._baseHeader}).then(this._checkRequest)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._baseHeader}).then(this._checkRequest)}_checkRequest(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}updateProfileInfo(e){return console.log(`!! updateProfileInfo, ${e}`),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._baseHeader,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkRequest)}deleteCard(e){return console.log(`Attempting to delete card with ID: ${e}`),console.log(`${this._baseUrl}/cards/${e}`),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._baseHeader}).then(this._checkRequest)}removeCardLikes(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._baseHeader}).then(this._checkRequest)}addCardLikes(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._baseHeader}).then(this._checkRequest)}addNewCard(e){return console.log(`!! addNewCard, ${e}`),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._baseHeader,body:JSON.stringify(e)}).then(this._checkRequest)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",baseHeader:{authorization:"2ac20083-7dba-4483-94f0-c00ccc6d0155","Content-Type":"application/json"}});Promise.all([m.getUserInfo(),m.getInitialCards()]).then((e=>{let[t,s]=e;p.setUserInfo(t),g=t._id,S=new _({items:s,renderer:e=>{const t=C(e);S.addItem(t)}},".elements__list"),S.renderItems()})).catch(console.error);const p=new class{constructor(e){this._nameElement=document.querySelector(e.profileNameSelector),this._descriptionElement=document.querySelector(e.profileDescriptionSelector),this._avatarElement=document.querySelector(e.profileAvatarSelector)}getUserInfo(){return{name:this._nameElement.textContent,about:this._descriptionElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._descriptionElement.textContent=e.about,console.log("userInfo.js:InputValues Are:",e)}setAvatarInfo(e){this._avatarElement.src=e,console.log("userInfo.js:Avatar Are:",e)}}({profileDescriptionSelector:".profile__description",profileNameSelector:".profile__title",profileAvatarSelector:".profile__img"});m.clearAllCards().then((()=>{console.log("All cards have been deleted.")})).catch((e=>{console.error("Failed to delete all cards:",e)}));const E=new d(l,r),f=new d(l,a),v=new u("#profile-edit-modal",(function(e){console.log("attempting to submit"),m.updateProfileInfo(e).then((()=>{p.setUserInfo(e),v.close()})).catch((e=>{console.log(e)})).finally((()=>{v.renderLoading("Save"),console.log("done")}))})),L=new u("#element-add-modal",(function(e){L.renderLoading(!0),m.addNewCard(e).then((e=>{const t=C(e);S.addItem(t),L.close()})).catch((e=>{console.log(e)})).finally((()=>{L.renderLoading(!1,"Create")}))})),b=new class extends h{constructor(e){super({popupSelector:e}),this._previewImageTitle=this._popupElement.querySelector(".modal__caption"),this._previewImageModal=this._popupElement.querySelector(".modal__image-preview")}open(e){this._previewImageModal.src=e.link,this._previewImageModal.alt=e.name,this._previewImageTitle.textContent=e.name,super.open()}}("#preview-modal");let g,S;function k(e){b.open(e)}function C(e){const t=new c(e.name,e.link,e.isLiked,e.likes,e._id,g,"#element-template",k,y,I);return console.log("index.js.:card values Are:",t),t.generateCard()}function y(e){B.setSubmitAction((()=>{B.renderLoading(!0),m.deleteCard(e.cardId).then((()=>{e.handleDeleteCard(),B.close()})).catch((e=>{console.error(e)})).finally((()=>{B.renderLoading(!1)}))})),B.open()}function I(e){e.isLiked?m.removeCardLikes(e.cardId).then((t=>{e.updateLikes(t.isLiked)})).catch((e=>{console.log(e)})):m.addCardLikes(e.cardId).then((t=>{e.updateLikes(t.isLiked)})).catch((e=>{console.log(e)}))}t.addEventListener("click",(()=>{!function(){const e=p.getUserInfo();s.value=e.name,n.value=e.about,v.open()}(),E.resetValidation()})),i.addEventListener("click",(()=>{L.open(),f.resetValidation()}));const B=new class extends h{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._saveButton=this._popupForm.querySelector(".modal__save-button")}setSubmitAction(e){this._handleConfirm=e}renderLoading(e){this._saveButton.textContent=e?"Loading...":"Yes"}_handleSubmit=e=>{e.preventDefault(),this._handleConfirm()};setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}}("#delete-modal");B.setEventListeners(),E.enableValidation(),f.enableValidation(),v.setEventListeners(),b.setEventListeners(),L.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,