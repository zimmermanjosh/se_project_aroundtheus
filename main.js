!function(){"use strict";const e=document.querySelector("#profile-edit-modal"),t=document.querySelector("#profile-edit-button"),s=document.querySelector("#title-input"),r=document.querySelector("#profile-input"),n=e.querySelector("#profile-edit-form"),o=document.querySelector("#element-add-modal"),i=(document.querySelector("#element-image-modal"),document.querySelector("#profile-add-button")),a=(document.querySelector(".elements__list"),o.querySelector(".modal__form")),l={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},c=document.querySelector("#avatar-edit-form"),d=document.querySelector("#profile-avatar__image-button");class u{constructor(e,t,s,r,n,o,i,a,l,c){this._name=e,this._link=t,this.isLiked=s,this._likes=r,this.cardId=n,this._userId=o,this._cardSelector=i,this._handleCardClick=a,this._handleDeleteButton=l,this._handleLikeButton=c}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleCardClick(this._getData())})),this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeButton(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteButton(this)}))}_renderLikes(){this.isLiked?this._cardLikeButton.classList.add("element__like-button_active"):this._cardLikeButton.classList.remove("element__like-button_active")}updateLikes(e){this.isLiked=e,this._renderLikes()}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".elements__content").cloneNode(!0)}_getData(){return{name:this._name,link:this._link}}generateCard(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".element__img"),this._cardLikeButton=this._cardElement.querySelector(".element__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".element__delete-button"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".element__text").textContent=this._name,this._setEventListeners(),this._renderLikes(),this._cardElement}}class h{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}toggleButtonState(){this._hasInvalidInput(this._input)?this._disableButton():this._enableButton()}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class _{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeByEscapeButton=this._closeByEscapeButton.bind(this)}open(){console.log("open popup!!!!"),this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._closeByEscapeButton)}close(){console.log("close popup!!!!"),this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._closeByEscapeButton)}_closeByEscapeButton=e=>{"Escape"===e.key&&(console.log("escape popup!!!!"),this.close())};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal__close")||e.target===this._popupElement)&&this.close()}))}_closeClickOutside=e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button"))&&this.close(e.currentTarget)}}class m extends _{constructor(e,t){super({popupSelector:e}),this._formElement=this._popupElement.querySelector(".modal__form"),this._formInputs=this._formElement.querySelectorAll(".modal__input"),this._saveButton=this._formElement.querySelector(".modal__button"),this._handleFormSubmit=t}close(){console.log("close popup w/form !!!!"),this._formElement.reset(),super.close()}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}_submitForm=e=>{e.preventDefault(),console.log("popup w/form -- submit e !!!!",e);const t=this._getInputValues();this._handleFormSubmit(t)};setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",this._submitForm)}renderLoading(e,t){this._saveButton.textContent=e?"Saving...":t}}class p{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}clearItems(){for(;this._container.firstChild;)this._container.removeChild(this._container.firstChild)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}let f,E;const v=new class{constructor(e){let{baseUrl:t,baseHeader:s}=e;this._baseUrl=t,this._baseHeader=s}clearAllCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._baseHeader}).then(this._checkRequest)}getInitialCards(e){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._baseHeader}).then(this._checkRequest)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._baseHeader}).then(this._checkRequest)}_checkRequest(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}updateProfileInfo(e){return console.log(`!! updateProfileInfo, ${e}`),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._baseHeader,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkRequest)}deleteCard(e){return console.log(`Attempting to delete card with ID: ${e}`),console.log(`${this._baseUrl}/cards/${e}`),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._baseHeader}).then(this._checkRequest)}removeCardLikes(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._baseHeader}).then(this._checkRequest)}addCardLikes(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._baseHeader}).then(this._checkRequest)}addNewCard(e){return console.log(`!! addNewCard, ${e}`),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._baseHeader,body:JSON.stringify(e)}).then(this._checkRequest)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._baseHeader,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",baseHeader:{authorization:"2ac20083-7dba-4483-94f0-c00ccc6d0155","Content-Type":"application/json"}});Promise.all([v.getUserInfo(),v.getInitialCards()]).then((e=>{let[t,s]=e;b.setUserInfo(t),f=t._id,E=new p({items:s,renderer:e=>{const t=q(e);E.addItem(t)}},".elements__list"),E.renderItems()})).catch(console.error);const b=new class{constructor(e){this._nameElement=document.querySelector(e.profileNameSelector),this._descriptionElement=document.querySelector(e.profileDescriptionSelector),this._avatarElement=document.querySelector(e.profileAvatarSelector)}getUserInfo(){return{name:this._nameElement.textContent,about:this._descriptionElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._descriptionElement.textContent=e.about,console.log("userInfo.js:InputValues Are:",e)}setAvatarInfo(e){this._avatarElement.src=e,console.log("userInfo.js:Avatar Are:",e)}}({profileDescriptionSelector:".profile__description",profileNameSelector:".profile__title",profileAvatarSelector:".profile__img"}),L=new h(l,n),g=new h(l,a),S=new m("#profile-edit-modal",(function(e){S.renderLoading(!0),console.log("attempting to submit"),v.updateProfileInfo(e).then((()=>{b.setUserInfo(e),S.close()})).catch((e=>{console.log(e)})).finally((()=>{S.renderLoading(!1,"Save")}))})),k=new m("#element-add-modal",(function(e){k.renderLoading(!0),v.addNewCard(e).then((e=>{const t=q(e);E.addItem(t),k.close()})).catch((e=>{console.log(e)})).finally((()=>{k.renderLoading(!1,"Create")}))})),y=new class extends _{constructor(e){super({popupSelector:e}),this._previewImageTitle=this._popupElement.querySelector(".modal__caption"),this._previewImageModal=this._popupElement.querySelector(".modal__image-preview")}open(e){this._previewImageModal.src=e.link,this._previewImageModal.alt=e.name,this._previewImageTitle.textContent=e.name,super.open()}}("#preview-modal"),C=new m("#avatar-edit-modal",(function(e){C.renderLoading(!0),v.updateProfileAvatar(e.avatar).then((()=>{b.setAvatarInfo(e.avatar),C.close()})).catch((e=>{console.log(e)})).finally((()=>{C.renderLoading(!1,"Save")}))})),I=new h(l,c);function B(e){y.open(e)}function q(e){const t=new u(e.name,e.link,e.isLiked,e.likes,e._id,f,"#element-template",B,w,U);return console.log("index.js.:card values Are:",t),t.generateCard()}function w(e){$.setSubmitAction((()=>{$.renderLoading(!0),v.deleteCard(e.cardId).then((()=>{e.handleDeleteCard(),$.close()})).catch((e=>{console.error(e)})).finally((()=>{$.renderLoading(!1)}))})),$.open()}function U(e){e.isLiked?v.removeCardLikes(e.cardId).then((t=>{e.updateLikes(t.isLiked)})).catch((e=>{console.log(e)})):v.addCardLikes(e.cardId).then((t=>{e.updateLikes(t.isLiked)})).catch((e=>{console.log(e)}))}t.addEventListener("click",(()=>{!function(){const e=b.getUserInfo();s.value=e.name,r.value=e.about,S.open()}(),L.resetValidation()})),i.addEventListener("click",(()=>{k.open(),g.resetValidation()}));const $=new class extends _{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._saveButton=this._popupForm.querySelector(".modal__button")}setSubmitAction(e){this._handleConfirm=e}renderLoading(e){this._saveButton.textContent=e?"Loading...":"Yes"}_handleSubmit=e=>{e.preventDefault(),this._handleConfirm()};setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}}("#delete-modal");d.addEventListener("click",(()=>{I.toggleButtonState(),C.open()})),I.enableValidation(),L.enableValidation(),g.enableValidation(),S.setEventListeners(),y.setEventListeners(),$.setEventListeners(),k.setEventListeners(),C.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZF91cGdyYWRlLy4vc3JjL2NvbnN0YW50cy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc3ByaW50OV9hdmF0YXJfYWRkX3VwZ3JhZGUvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3NwcmludDlfYXZhdGFyX2FkZF91cGdyYWRlLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zcHJpbnQ5X2F2YXRhcl9hZGRfdXBncmFkZS8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3NwcmludDlfYXZhdGFyX2FkZF91cGdyYWRlLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9zcHJpbnQ5X2F2YXRhcl9hZGRfdXBncmFkZS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc3ByaW50OV9hdmF0YXJfYWRkX3VwZ3JhZGUvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3ByaW50OV9hdmF0YXJfYWRkX3VwZ3JhZGUvLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vc3ByaW50OV9hdmF0YXJfYWRkX3VwZ3JhZGUvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9zcHJpbnQ5X2F2YXRhcl9hZGRfdXBncmFkZS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3NwcmludDlfYXZhdGFyX2FkZF91cGdyYWRlLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vZXhwb3J0IGNvbnN0IGluaXRpYWxpemVDYXJkcyA9IFtcbi8qXG5uYW1lOiBcImxlZ2VuZCBvZiBiaWxsaWUgamVhblwiLFxudXJsOiBcImh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9NL01WNUJOakl3T1Rnek4yUXRaVFkyTWkwME1tVTFMV0ZqTVRJdE4yRXdaVEZoWVRNd1pHUmpYa0V5WGtGcWNHZGVRWFZ5T0RZME56Y3hOd0BALl9WMV8uanBnXCIsXG5cbm5hbWU6IFwic2tpIHBhdHJvbFwiLFxudXJsOiBcImh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzgxQTQwOHRNQ0NMLl9BQ19VRjg5NCwxMDAwX1FMODBfLmpwZ1wiLFxuXG5uYW1lOiBcImJldHRlciBvZmYgZGVhZFwiLFxudXJsOiBcImh0dHBzOi8vc2hhdHBvZC5jb20vbW92aWVzL3dwLWNvbnRlbnQvdXBsb2Fkcy9CZXR0ZXItT2ZmLURlYWQtTW92aWUtUG9zdGVyLTE5ODUuanBnXCIsXG5cbm5hbWU6IFwibGVzcyB0aGVuIHplcm9cIixcbnVybDogXCJodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9lbi8zLzM0L0xlc3NfdGhhbl96ZXJvXzE5ODdfcG9zdGVyLmpwZ1wiLFxuXG5uYW1lOiBcInNpeHRlZW4gY2FuZGxlc1wiLFxudXJsOiBcImh0dHBzOi8vc2hhdHBvZC5jb20vbW92aWVzL3dwLWNvbnRlbnQvdXBsb2Fkcy9yelRyUlFnNWVrNDdZbDBWZmVuYzY5cjlnT2QtZTE1ODU2NzU3MDQ4MDkuanBnXCIsXG5cbm5hbWU6IFwiTGFieXJpbnRoXCIsXG51cmw6IFwiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL00vTVY1Qk9XSTNPR0V6T1RVdFlXWTRNUzAwWkRnd0xXRmxaamd0TmpKbU5qY3lOR00xWkRJM1hrRXlYa0ZxY0dkZVFYVnlNVFV6TVRnMk9Ea3ouX1YxXy5qcGd2XCIsXG5cbm5hbWU6IFwidGhlIGxhc3Qgc3RhcmZpZ2h0ZXJcIixcbnVybDogXCJodHRwczovL2ltYWdlcy5qdXN0d2F0Y2guY29tL3Bvc3Rlci8xMTA2NzIxMC9zNzE4L3RoZS1sYXN0LXN0YXJmaWdodGVyLiU3QmZvcm1hdCU3RFwiLFxuXG5uYW1lOiBcInJlYWwgZ2VuaXVzXCIsXG51cmw6IFwiaHR0cHM6Ly9tLm1lZGlhLWFtYXpvbi5jb20vaW1hZ2VzL00vTVY1Qk5UUTVNelUzT0RnME9GNUJNbDVCYW5CblhrRnRaVGd3T0RNME16UXhNREVALl9WMV8uanBnXCIsXG5cbm5hbWU6IFwic2VjcmV0IG9mIG15IHN1Y2Nlc3NcIixcbnVybDogXCJodHRwczovL2ZpbG0tYXV0aG9yaXR5LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMS8wNy9tYXhyZXNkZWZhdWx0LTEuanBnXCIsXG5cbm5hbWU6IFwibGVnZW5kXCIsXG51cmw6IFwiaHR0cHM6Ly90d2lsaWdodHN3YXJkZW4uZmlsZXMud29yZHByZXNzLmNvbS8yMDEyLzEwL3NjcmVlbnNob3QtbHJnLTA3LnBuZz93PTE1NjhcIixcblxubmFtZTogXCJ0ZWVuIHdvbGZcIixcbnVybDogXCJodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvTS9NVjVCTUdGbVpURmhZamt0TW1ZeVppMDBabUU0TFdJME5HRXRNRFkyTUdFek1EWTBZamRpWGtFeVhrRnFjR2RlUVhWeU1UUXhOek16TkRJQC5fVjFfLmpwZ1wiLFxuXG5uYW1lOiBcIndlaXJkIHNjaWVuY2VcIixcbmxpbms6IFwiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvZW4vZC9kNi9Nb3ZpZV9wb3N0ZXJfZm9yX1dlaXJkX1NjaWVuY2VfJTI4MTk4NSUyOS5qcGdcIiwqL1xuXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LW1vZGFsXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWVkaXQtYnV0dG9uXCIpO1xuXG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RpdGxlLWlucHV0XCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWlucHV0XCIpO1xuXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRGb3JtID1cbiAgcHJvZmlsZUVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1mb3JtXCIpO1xuZXhwb3J0IGNvbnN0IGVsZW1lbnRBZGRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZWxlbWVudC1hZGQtbW9kYWxcIik7XG5leHBvcnQgY29uc3QgZWxlbWVudEltYWdlTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VsZW1lbnQtaW1hZ2UtbW9kYWxcIik7XG5leHBvcnQgY29uc3QgY2FyZEFkZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1hZGQtYnV0dG9uXCIpO1xuXG5leHBvcnQgY29uc3QgYXBpVXJsID0gXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiO1xuZXhwb3J0IGNvbnN0IGFwaVRva2VuID0gXCIyYWMyMDA4My03ZGJhLTQ0ODMtOTRmMC1jMDBjY2M2ZDAxNTVcIjtcblxuZXhwb3J0IGNvbnN0IGNhcmRzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2xpc3RcIik7XG5cbmV4cG9ydCBjb25zdCBjYXJkQWRkRm9ybSA9IGVsZW1lbnRBZGRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuXG5leHBvcnQgY29uc3QgY29uZmlnVmFsaWRhdGlvbiA9IHtcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXG59O1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0b3JzID0ge1xuICBjYXJkU2VjdGlvbjogXCIuZWxlbWVudHNfX2xpc3RcIixcbiAgY2FyZFRlbXBsYXRlOiBcIiNlbGVtZW50LXRlbXBsYXRlXCIsXG4gIHByZXZpZXdNb2RhbDogXCIjcHJldmlldy1tb2RhbFwiLFxuICBhZGRDYXJkUG9wdXBTZWxlY3RvcjogXCIjZWxlbWVudC1hZGQtbW9kYWxcIixcbiAgcHJvZmlsZVBvcHVwU2VsZWN0b3I6IFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxuICBhdmF0YXJQb3B1cFNlbGVjdG9yOiBcIiNhdmF0YXItZWRpdC1tb2RhbFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGF2YXRhckVkaXRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdmF0YXItZWRpdC1mb3JtXCIpO1xuZXhwb3J0IGNvbnN0IGF2YXRhckVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIiNwcm9maWxlLWF2YXRhcl9faW1hZ2UtYnV0dG9uXCJcbik7XG4iLCJpbXBvcnQgXCIvc3JjL2NvbnN0YW50cy9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIG5hbWUsXG4gICAgbGluayxcbiAgICBpc0xpa2VkLFxuICAgIGxpa2VzLFxuICAgIF9pZCxcbiAgICB1c2VySWQsXG4gICAgY2FyZFNlbGVjdG9yLFxuICAgIGhhbmRsZUNhcmRDbGljayxcbiAgICBoYW5kbGVEZWxldGVCdXR0b24sXG4gICAgaGFuZGxlTGlrZUJ1dHRvblxuICApIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9saW5rID0gbGluaztcbiAgICB0aGlzLmlzTGlrZWQgPSBpc0xpa2VkO1xuICAgIHRoaXMuX2xpa2VzID0gbGlrZXM7XG4gICAgdGhpcy5jYXJkSWQgPSBfaWQ7XG4gICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQnV0dG9uID0gaGFuZGxlRGVsZXRlQnV0dG9uO1xuICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24gPSBoYW5kbGVMaWtlQnV0dG9uO1xuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX2dldERhdGEoKSk7XG4gICAgfSk7XG4gICAgdGhpcy5fY2FyZExpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24odGhpcyk7XG4gICAgfSk7XG4gICAgdGhpcy5fY2FyZERlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQnV0dG9uKHRoaXMpO1xuICAgIH0pO1xuICB9XG5cbiAgX3JlbmRlckxpa2VzKCkge1xuICAgIGlmICh0aGlzLmlzTGlrZWQpIHtcbiAgICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlbGVtZW50X19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJlbGVtZW50X19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlTGlrZXMoaXNMaWtlZCkge1xuICAgIHRoaXMuaXNMaWtlZCA9IGlzTGlrZWQ7XG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcbiAgfVxuXG4gIGhhbmRsZURlbGV0ZUNhcmQoKSB7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIHJldHVybiBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50c19fY29udGVudFwiKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgfVxuXG4gIF9nZXREYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgbGluazogdGhpcy5fbGluayxcbiAgICB9O1xuICB9XG5cbiAgZ2VuZXJhdGVDYXJkKCkge1xuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcblxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudF9faW1nXCIpO1xuXG4gICAgdGhpcy5fY2FyZExpa2VCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIuZWxlbWVudF9fbGlrZS1idXR0b25cIlxuICAgICk7XG5cbiAgICB0aGlzLl9jYXJkRGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiLmVsZW1lbnRfX2RlbGV0ZS1idXR0b25cIlxuICAgICk7XG5cbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX3RleHRcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xuXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWxlbWVudCkge1xuICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBjb25maWcuaW5wdXRTZWxlY3RvcjtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XG4gICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gY29uZmlnLmlucHV0RXJyb3JDbGFzcztcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlnLmVycm9yQ2xhc3M7XG5cbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuXG4gICAgLy90aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcikpO1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IFtcbiAgICAgIC4uLnRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvciksXG4gICAgXTtcblxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvclxuICAgICk7XG4gIH1cblxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXG4gICAgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgfVxuXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXG4gICAgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgfSk7XG4gIH1cblxuICBfZW5hYmxlQnV0dG9uKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgX2Rpc2FibGVCdXR0b24oKSB7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQodGhpcy5faW5wdXQpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VuYWJsZUJ1dHRvbigpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XG5cbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fY2xvc2VCeUVzY2FwZUJ1dHRvbiA9IHRoaXMuX2Nsb3NlQnlFc2NhcGVCdXR0b24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgY29uc29sZS5sb2coXCJvcGVuIHBvcHVwISEhIVwiKTtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9jbG9zZUJ5RXNjYXBlQnV0dG9uKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIGNvbnNvbGUubG9nKFwiY2xvc2UgcG9wdXAhISEhXCIpO1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2Nsb3NlQnlFc2NhcGVCdXR0b24pO1xuICB9XG4gIF9jbG9zZUJ5RXNjYXBlQnV0dG9uID0gKGUpID0+IHtcbiAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZXNjYXBlIHBvcHVwISEhIVwiKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy8gdGhpcy5fcG9wdXBFbGVtZW50IGlzIHRoZSBtb2RhbFxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBoYXMgdGhlIGBtb2RhbF9fY2xvc2VgIGNsYXNzIG9yIGlmIHRoZSBjbGljayBpcyBvdXRzaWRlIHRoZSBgLm1vZGFsX19jb250YWluZXJgXG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIikgfHxcbiAgICAgICAgZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9wb3B1cEVsZW1lbnRcbiAgICAgICkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX2Nsb3NlQ2xpY2tPdXRzaWRlID0gKGUpID0+IHtcbiAgICBpZiAoXG4gICAgICBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbFwiKSB8fFxuICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlLWJ1dHRvblwiKVxuICAgICkge1xuICAgICAgdGhpcy5jbG9zZShlLmN1cnJlbnRUYXJnZXQpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XG4gICAgdGhpcy5fZm9ybUlucHV0cyA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpO1xuICAgIHRoaXMuX3NhdmVCdXR0b24gPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idXR0b25cIik7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcImNsb3NlIHBvcHVwIHcvZm9ybSAhISEhXCIpO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XG4gICAgLy90aGlzLl9mb3JtRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX3N1Ym1pdEZvcm0pO1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gIH1cblxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgY29uc3QgaW5wdXRzID0ge307XG4gICAgdGhpcy5fZm9ybUlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXRzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGlucHV0cztcbiAgfVxuXG4gIF9zdWJtaXRGb3JtID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc29sZS5sb2coXCJwb3B1cCB3L2Zvcm0gLS0gc3VibWl0IGUgISEhIVwiLCBlKTtcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHRoaXMuX2dldElucHV0VmFsdWVzKCk7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChpbnB1dFZhbHVlcyk7XG4gIH07XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX3N1Ym1pdEZvcm0pO1xuICB9XG4gIHJlbmRlckxvYWRpbmcoaXNMb2FkaW5nLCBzYXZlQnV0dG9uVGV4dCkge1xuICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgIHRoaXMuX3NhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zYXZlQnV0dG9uLnRleHRDb250ZW50ID0gc2F2ZUJ1dHRvblRleHQ7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgfVxuXG4gIGNsZWFySXRlbXMoKSB7XG4gICAgLy8gQXNzdW1pbmcgdGhpcy5fY29udGFpbmVyIGlzIHRoZSBET00gZWxlbWVudCB0aGF0IGhvbGRzIGFsbCB0aGUgY2FyZHNcbiAgICB3aGlsZSAodGhpcy5fY29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLl9jb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySXRlbXMoKSB7XG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRJdGVtKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IENhcmQgZnJvbSBcIi9zcmMvY29tcG9uZW50cy9DYXJkLmpzXCI7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgXCIvc3JjL3BhZ2VzL2luZGV4LmNzc1wiO1xuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm1hdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb25cIjtcbihcInNyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qc1wiKTtcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpXCI7XG5pbXBvcnQge1xuICBhcGlUb2tlbixcbiAgYXBpVXJsLFxuICBjYXJkQWRkQnV0dG9uLFxuICBjYXJkQWRkRm9ybSxcbiAgY29uZmlnVmFsaWRhdGlvbixcbiAgcHJvZmlsZURlc2NyaXB0aW9uSW5wdXQsXG4gIHByb2ZpbGVFZGl0QnV0dG9uLFxuICBwcm9maWxlRWRpdEZvcm0sXG4gIHByb2ZpbGVUaXRsZUlucHV0LFxuICBzZWxlY3RvcnMsXG4gIGF2YXRhckVkaXRCdXR0b24sXG4gIGF2YXRhckVkaXRGb3JtLFxufSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvblwiO1xuXG4vL2NvbnN0IGZvciBmdW5jdGlvbnNcbmxldCB1c2VySWQ7XG5sZXQgbmV3Q2FyZFNlY3Rpb247XG5cbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBhcGlVcmwsXG4gIGJhc2VIZWFkZXI6IHtcbiAgICBhdXRob3JpemF0aW9uOiBhcGlUb2tlbixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgfSxcbn0pO1xuXG5jb25zdCBjYXJkU2VsZWN0b3IgPSBzZWxlY3RvcnMuY2FyZFRlbXBsYXRlO1xuXG5Qcm9taXNlLmFsbChbYXBpLmdldFVzZXJJbmZvKCksIGFwaS5nZXRJbml0aWFsQ2FyZHMoKV0pXG4gIC50aGVuKChbdXNlckRhdGEsIGNhcmREYXRhXSkgPT4ge1xuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHVzZXJEYXRhKTtcbiAgICB1c2VySWQgPSB1c2VyRGF0YS5faWQ7XG4gICAgbmV3Q2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcbiAgICAgIHtcbiAgICAgICAgaXRlbXM6IGNhcmREYXRhLFxuICAgICAgICByZW5kZXJlcjogKGRhdGEpID0+IHtcbiAgICAgICAgICBjb25zdCBuZXdDYXJkID0gcmVuZGVyQ2FyZChkYXRhKTtcbiAgICAgICAgICBuZXdDYXJkU2VjdGlvbi5hZGRJdGVtKG5ld0NhcmQpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHNlbGVjdG9ycy5jYXJkU2VjdGlvblxuICAgICk7XG4gICAgbmV3Q2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKTtcbiAgfSlcbiAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuXG4vL2VkaXQgZm9ybVxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICBwcm9maWxlRGVzY3JpcHRpb25TZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcbiAgcHJvZmlsZU5hbWVTZWxlY3RvcjogXCIucHJvZmlsZV9fdGl0bGVcIixcbiAgcHJvZmlsZUF2YXRhclNlbGVjdG9yOiBcIi5wcm9maWxlX19pbWdcIixcbn0pO1xuXG4vKmFwaVxuICAuY2xlYXJBbGxDYXJkcygpXG4gIC50aGVuKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkFsbCBjYXJkcyBoYXZlIGJlZW4gZGVsZXRlZC5cIik7XG4gIH0pXG4gIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGRlbGV0ZSBhbGwgY2FyZHM6XCIsIGVycm9yKTtcbiAgfSk7Ki9cblxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWdWYWxpZGF0aW9uLCBwcm9maWxlRWRpdEZvcm0pO1xuXG5jb25zdCBhZGRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgY2FyZEFkZEZvcm0pO1xuXG5jb25zdCBwcm9maWxlRWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXG4gIFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxuICBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdFxuKTtcblxuY29uc3QgYWRkTmV3Q2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXG4gIFwiI2VsZW1lbnQtYWRkLW1vZGFsXCIsXG4gIGhhbmRsZU5ld0NhcmRTdWJtaXRcbik7XG5cbmNvbnN0IGNhcmRQcmV2aWV3UG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjcHJldmlldy1tb2RhbFwiKTtcblxuY29uc3QgYXZhdGFyRWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXG4gIHNlbGVjdG9ycy5hdmF0YXJQb3B1cFNlbGVjdG9yLFxuICBoYW5kbGVBdmF0YXJGb3JtU3VibWl0XG4pO1xuXG5jb25zdCBhdmF0YXJGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgYXZhdGFyRWRpdEZvcm0pO1xuXG5mdW5jdGlvbiBoYW5kbGVBdmF0YXJGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XG4gIGF2YXRhckVkaXRQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xuICBhcGlcbiAgICAudXBkYXRlUHJvZmlsZUF2YXRhcihpbnB1dFZhbHVlcy5hdmF0YXIpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgdXNlckluZm8uc2V0QXZhdGFySW5mbyhpbnB1dFZhbHVlcy5hdmF0YXIpO1xuICAgICAgYXZhdGFyRWRpdFBvcHVwLmNsb3NlKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9KVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGF2YXRhckVkaXRQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlLCBcIlNhdmVcIik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XG4gIHByb2ZpbGVFZGl0UG9wdXAucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgY29uc29sZS5sb2coXCJhdHRlbXB0aW5nIHRvIHN1Ym1pdFwiKTtcbiAgYXBpXG4gICAgLnVwZGF0ZVByb2ZpbGVJbmZvKGlucHV0VmFsdWVzKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKGlucHV0VmFsdWVzKTtcbiAgICAgIHByb2ZpbGVFZGl0UG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgcHJvZmlsZUVkaXRQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlLCBcIlNhdmVcIik7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiZG9uZVwiKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmV3Q2FyZFN1Ym1pdChpbnB1dFZhbHVlcykge1xuICBhZGROZXdDYXJkUG9wdXAucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgYXBpXG4gICAgLmFkZE5ld0NhcmQoaW5wdXRWYWx1ZXMpXG4gICAgLnRoZW4oKGNhcmREYXRhKSA9PiB7XG4gICAgICBjb25zdCBuZXdDYXJkRGF0YSA9IHJlbmRlckNhcmQoY2FyZERhdGEpO1xuICAgICAgbmV3Q2FyZFNlY3Rpb24uYWRkSXRlbShuZXdDYXJkRGF0YSk7XG4gICAgICBhZGROZXdDYXJkUG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgYWRkTmV3Q2FyZFBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UsIFwiQ3JlYXRlXCIpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2soY2FyZERhdGEpIHtcbiAgY2FyZFByZXZpZXdQb3B1cC5vcGVuKGNhcmREYXRhKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2FyZChjYXJkRGF0YSkge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgY2FyZERhdGEubmFtZSxcbiAgICBjYXJkRGF0YS5saW5rLFxuICAgIGNhcmREYXRhLmlzTGlrZWQsXG4gICAgY2FyZERhdGEubGlrZXMsXG4gICAgY2FyZERhdGEuX2lkLFxuICAgIHVzZXJJZCxcbiAgICBjYXJkU2VsZWN0b3IsXG4gICAgaGFuZGxlQ2FyZENsaWNrLFxuICAgIGhhbmRsZURlbGV0ZUNsaWNrLFxuICAgIGhhbmRsZUxpa2VDbGlja1xuICApO1xuICBjb25zb2xlLmxvZyhcImluZGV4LmpzLjpjYXJkIHZhbHVlcyBBcmU6XCIsIGNhcmQpO1xuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ2xpY2soY2FyZCkge1xuICAvLyBTZXQgdGhlIHN1Ym1pdCBhY3Rpb24gZm9yIHRoZSBkZWxldGUgY29uZmlybWF0aW9uXG4gIGRlbGV0ZUNhcmRQb3B1cC5zZXRTdWJtaXRBY3Rpb24oKCkgPT4ge1xuICAgIGRlbGV0ZUNhcmRQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xuICAgIGFwaVxuICAgICAgLmRlbGV0ZUNhcmQoY2FyZC5jYXJkSWQpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNhcmQuaGFuZGxlRGVsZXRlQ2FyZCgpOyAvLyBUaGlzIHNob3VsZCBiZSBhIG1ldGhvZCBpbiB5b3VyIENhcmQgY2xhc3MgdGhhdCByZW1vdmVzIHRoZSBjYXJkIGZyb20gdGhlIERPTVxuICAgICAgICBkZWxldGVDYXJkUG9wdXAuY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7IC8vIFVwZGF0ZWQgdG8gdXNlIGNvbnNvbGUuZXJyb3IgZm9yIGJldHRlciBlcnJvciB2aXNpYmlsaXR5XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBkZWxldGVDYXJkUG9wdXAucmVuZGVyTG9hZGluZyhmYWxzZSk7IC8vIFJlc2V0IHRoZSBidXR0b24gdGV4dCBiYWNrIHRvIFwiWWVzXCJcbiAgICAgIH0pO1xuICB9KTtcblxuICAvLyBPcGVuIHRoZSBkZWxldGUgY29uZmlybWF0aW9uIHBvcHVwXG4gIGRlbGV0ZUNhcmRQb3B1cC5vcGVuKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUxpa2VDbGljayhjYXJkKSB7XG4gIGlmIChjYXJkLmlzTGlrZWQpIHtcbiAgICBhcGlcbiAgICAgIC5yZW1vdmVDYXJkTGlrZXMoY2FyZC5jYXJkSWQpXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGNhcmQudXBkYXRlTGlrZXMocmVzLmlzTGlrZWQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhcGlcbiAgICAgIC5hZGRDYXJkTGlrZXMoY2FyZC5jYXJkSWQpXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGNhcmQudXBkYXRlTGlrZXMocmVzLmlzTGlrZWQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRWRpdENsaWNrKCkge1xuICBjb25zdCB1c2VyID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcbiAgcHJvZmlsZVRpdGxlSW5wdXQudmFsdWUgPSB1c2VyLm5hbWU7XG4gIHByb2ZpbGVEZXNjcmlwdGlvbklucHV0LnZhbHVlID0gdXNlci5hYm91dDtcbiAgcHJvZmlsZUVkaXRQb3B1cC5vcGVuKCk7XG59XG5cbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGhhbmRsZVByb2ZpbGVFZGl0Q2xpY2soKTtcbiAgZWRpdEZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XG59KTtcblxuY2FyZEFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhZGROZXdDYXJkUG9wdXAub3BlbigpO1xuICBhZGRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xufSk7XG5cbmNvbnN0IGRlbGV0ZUNhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oXCIjZGVsZXRlLW1vZGFsXCIpO1xuXG5hdmF0YXJFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGF2YXRhckZvcm1WYWxpZGF0b3IudG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgYXZhdGFyRWRpdFBvcHVwLm9wZW4oKTtcbn0pO1xuXG5hdmF0YXJGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5wcm9maWxlRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5jYXJkUHJldmlld1BvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5kZWxldGVDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbmFkZE5ld0NhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuYXZhdGFyRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIGJhc2VIZWFkZXIgfSkge1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMuX2Jhc2VIZWFkZXIgPSBiYXNlSGVhZGVyO1xuICB9XG5cbiAgY2xlYXJBbGxDYXJkcygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsIC8vIEFzc3VtaW5nIHlvdXIgQVBJIHN1cHBvcnRzIGJ1bGsgZGVsZXRlIHdpdGggdGhpcyBtZXRob2RcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2Jhc2VIZWFkZXIsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1JlcXVlc3QpO1xuICB9XG5cbiAgZ2V0SW5pdGlhbENhcmRzKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2Jhc2VIZWFkZXIsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1JlcXVlc3QpO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5fYmFzZUhlYWRlcixcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVxdWVzdCk7XG4gIH1cblxuICBfY2hlY2tSZXF1ZXN0KHJlcykge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgc2VydmVyIHJldHVybnMgYW4gZXJyb3IsIHJlamVjdCB0aGUgcHJvbWlzZVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgfVxuXG4gIHVwZGF0ZVByb2ZpbGVJbmZvKGlucHV0VmFsdWVzKSB7XG4gICAgY29uc29sZS5sb2coYCEhIHVwZGF0ZVByb2ZpbGVJbmZvLCAke2lucHV0VmFsdWVzfWApO1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5fYmFzZUhlYWRlcixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogaW5wdXRWYWx1ZXMubmFtZSxcbiAgICAgICAgYWJvdXQ6IGlucHV0VmFsdWVzLmFib3V0LFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1JlcXVlc3QpO1xuICB9XG5cbiAgLypkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9iYXNlSGVhZGVyLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXF1ZXN0KTtcbiAgfSovXG5cbiAgZGVsZXRlQ2FyZChjYXJkSWQpIHtcbiAgICBjb25zb2xlLmxvZyhgQXR0ZW1wdGluZyB0byBkZWxldGUgY2FyZCB3aXRoIElEOiAke2NhcmRJZH1gKTsgLy8gTG9nIHRvIHZlcmlmeSB0aGUgY2FyZCBJRFxuICAgIGNvbnNvbGUubG9nKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWApOyAvLyBMb2cgdGhlIGNvbXBsZXRlIFVSTCB0byB2ZXJpZnkgY29ycmVjdG5lc3NcblxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9iYXNlSGVhZGVyLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXF1ZXN0KTtcbiAgfVxuXG4gIHJlbW92ZUNhcmRMaWtlcyhjYXJkSWQpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5fYmFzZUhlYWRlcixcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVxdWVzdCk7XG4gIH1cblxuICBhZGRDYXJkTGlrZXMoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2Jhc2VIZWFkZXIsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1JlcXVlc3QpO1xuICB9XG5cbiAgYWRkTmV3Q2FyZChpbnB1dFZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGAhISBhZGROZXdDYXJkLCAke2lucHV0VmFsdWVzfWApO1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9iYXNlSGVhZGVyLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaW5wdXRWYWx1ZXMpLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXF1ZXN0KTtcbiAgfVxuXG4gIHVwZGF0ZVByb2ZpbGVBdmF0YXIoaW5wdXRWYWx1ZXMpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9iYXNlSGVhZGVyLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhdmF0YXI6IGlucHV0VmFsdWVzIH0pLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3JzKSB7XG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5wcm9maWxlTmFtZVNlbGVjdG9yKTtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5wcm9maWxlRGVzY3JpcHRpb25TZWxlY3Rvcik7XG4gICAgLy90aGlzLl9uYW1lRWxlbWVudCA9IG5hbWVFbGVtZW50O1xuICAgIC8vdGhpcy5fam9iRWxlbWVudCA9IGpvYkVsZW1lbnQ7XG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLnByb2ZpbGVBdmF0YXJTZWxlY3Rvcik7XG4gIH1cblxuICBnZXRVc2VySW5mbygpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcbiAgICBhYm91dDogdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50LFxuICAgIC8vYXZhdGFyOiB0aGlzLl9hdmF0YXJFbGVtZW50LnRleHRDb250ZW50XG4gICAgfTtcbiAgfVxuXG5zZXRVc2VySW5mbyhpbnB1dFZhbHVlcykge1xuICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0VmFsdWVzLm5hbWU7XG4gIHRoaXMuX2Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0VmFsdWVzLmFib3V0O1xuICBjb25zb2xlLmxvZyhcInVzZXJJbmZvLmpzOklucHV0VmFsdWVzIEFyZTpcIiwgaW5wdXRWYWx1ZXMpO1xuICB9XG5cbnNldEF2YXRhckluZm8oYXZhdGFyKSB7XG4gIHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjID0gYXZhdGFyO1xuICBjb25zb2xlLmxvZyhcInVzZXJJbmZvLmpzOkF2YXRhciBBcmU6XCIsIGF2YXRhcik7XG4gIH1cbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX3ByZXZpZXdJbWFnZVRpdGxlID1cbiAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jYXB0aW9uXCIpO1xuICAgIHRoaXMuX3ByZXZpZXdJbWFnZU1vZGFsID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5tb2RhbF9faW1hZ2UtcHJldmlld1wiXG4gICAgKTtcbiAgfVxuXG4gIG9wZW4oZGF0YSkge1xuICAgIHRoaXMuX3ByZXZpZXdJbWFnZU1vZGFsLnNyYyA9IGRhdGEubGluaztcbiAgICB0aGlzLl9wcmV2aWV3SW1hZ2VNb2RhbC5hbHQgPSBkYXRhLm5hbWU7XG4gICAgdGhpcy5fcHJldmlld0ltYWdlVGl0bGUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoQ29uZmlybWF0aW9uIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuICAgIHRoaXMuX3NhdmVCdXR0b24gPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xuICB9XG5cbiAgc2V0U3VibWl0QWN0aW9uKGFjdGlvbikge1xuICAgIHRoaXMuX2hhbmRsZUNvbmZpcm0gPSBhY3Rpb247XG4gIH1cblxuICByZW5kZXJMb2FkaW5nKGlzTG9hZGluZykge1xuICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgIHRoaXMuX3NhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIkxvYWRpbmcuLi5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiWWVzXCI7XG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVN1Ym1pdCA9IChldnQpID0+IHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLl9oYW5kbGVDb25maXJtKCk7XG4gIH07XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLl9oYW5kbGVTdWJtaXQpO1xuICB9XG59XG4iXSwibmFtZXMiOlsicHJvZmlsZUVkaXRNb2RhbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZVRpdGxlSW5wdXQiLCJwcm9maWxlRGVzY3JpcHRpb25JbnB1dCIsInByb2ZpbGVFZGl0Rm9ybSIsImVsZW1lbnRBZGRNb2RhbCIsImNhcmRBZGRCdXR0b24iLCJjYXJkQWRkRm9ybSIsImNvbmZpZ1ZhbGlkYXRpb24iLCJmb3JtU2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsImF2YXRhckVkaXRGb3JtIiwiYXZhdGFyRWRpdEJ1dHRvbiIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJsaW5rIiwiaXNMaWtlZCIsImxpa2VzIiwiX2lkIiwidXNlcklkIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwiaGFuZGxlRGVsZXRlQnV0dG9uIiwiaGFuZGxlTGlrZUJ1dHRvbiIsInRoaXMiLCJfbmFtZSIsIl9saW5rIiwiX2xpa2VzIiwiY2FyZElkIiwiX3VzZXJJZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlQ2FyZENsaWNrIiwiX2hhbmRsZURlbGV0ZUJ1dHRvbiIsIl9oYW5kbGVMaWtlQnV0dG9uIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2NhcmRJbWFnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZ2V0RGF0YSIsIl9jYXJkTGlrZUJ1dHRvbiIsIl9jYXJkRGVsZXRlQnV0dG9uIiwiX3JlbmRlckxpa2VzIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwidXBkYXRlTGlrZXMiLCJoYW5kbGVEZWxldGVDYXJkIiwiX2NhcmRFbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiY29udGVudCIsImNsb25lTm9kZSIsImdlbmVyYXRlQ2FyZCIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiRm9ybVZhbGlkYXRvciIsImNvbmZpZyIsImZvcm1FbGVtZW50IiwiX2lucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dExpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3N1Ym1pdEJ1dHRvbiIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwiX2hpZGVJbnB1dEVycm9yIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oYXNJbnZhbGlkSW5wdXQiLCJzb21lIiwiX2VuYWJsZUJ1dHRvbiIsImRpc2FibGVkIiwiX2Rpc2FibGVCdXR0b24iLCJ0b2dnbGVCdXR0b25TdGF0ZSIsIl9pbnB1dCIsInJlc2V0VmFsaWRhdGlvbiIsImZvckVhY2giLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJQb3B1cCIsIl9yZWYiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsIl9jbG9zZUJ5RXNjYXBlQnV0dG9uIiwiYmluZCIsIm9wZW4iLCJjb25zb2xlIiwibG9nIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZSIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwiZXZlbnQiLCJ0YXJnZXQiLCJjb250YWlucyIsIl9jbG9zZUNsaWNrT3V0c2lkZSIsImN1cnJlbnRUYXJnZXQiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX2Zvcm1JbnB1dHMiLCJfc2F2ZUJ1dHRvbiIsIl9oYW5kbGVGb3JtU3VibWl0IiwicmVzZXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dHMiLCJpbnB1dCIsInZhbHVlIiwiX3N1Ym1pdEZvcm0iLCJpbnB1dFZhbHVlcyIsInJlbmRlckxvYWRpbmciLCJpc0xvYWRpbmciLCJzYXZlQnV0dG9uVGV4dCIsIlNlY3Rpb24iLCJjb250YWluZXIiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImNsZWFySXRlbXMiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJuZXdDYXJkU2VjdGlvbiIsImFwaSIsImJhc2VVcmwiLCJiYXNlSGVhZGVyIiwiX2Jhc2VVcmwiLCJfYmFzZUhlYWRlciIsImNsZWFyQWxsQ2FyZHMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJ0aGVuIiwiX2NoZWNrUmVxdWVzdCIsImdldEluaXRpYWxDYXJkcyIsImdldFVzZXJJbmZvIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsInVwZGF0ZVByb2ZpbGVJbmZvIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhYm91dCIsImRlbGV0ZUNhcmQiLCJyZW1vdmVDYXJkTGlrZXMiLCJhZGRDYXJkTGlrZXMiLCJhZGROZXdDYXJkIiwidXBkYXRlUHJvZmlsZUF2YXRhciIsImF2YXRhciIsIl9jaGVja1Jlc3BvbnNlIiwiYXV0aG9yaXphdGlvbiIsImFsbCIsInVzZXJEYXRhIiwiY2FyZERhdGEiLCJ1c2VySW5mbyIsInNldFVzZXJJbmZvIiwiZGF0YSIsIm5ld0NhcmQiLCJyZW5kZXJDYXJkIiwiY2F0Y2giLCJlcnJvciIsInNlbGVjdG9ycyIsIl9uYW1lRWxlbWVudCIsInByb2ZpbGVOYW1lU2VsZWN0b3IiLCJfZGVzY3JpcHRpb25FbGVtZW50IiwicHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3IiLCJfYXZhdGFyRWxlbWVudCIsInByb2ZpbGVBdmF0YXJTZWxlY3RvciIsInNldEF2YXRhckluZm8iLCJlZGl0Rm9ybVZhbGlkYXRvciIsImFkZEZvcm1WYWxpZGF0b3IiLCJwcm9maWxlRWRpdFBvcHVwIiwiZXJyIiwiZmluYWxseSIsImFkZE5ld0NhcmRQb3B1cCIsIm5ld0NhcmREYXRhIiwiY2FyZFByZXZpZXdQb3B1cCIsIl9wcmV2aWV3SW1hZ2VUaXRsZSIsIl9wcmV2aWV3SW1hZ2VNb2RhbCIsImF2YXRhckVkaXRQb3B1cCIsImF2YXRhckZvcm1WYWxpZGF0b3IiLCJjYXJkIiwiaGFuZGxlRGVsZXRlQ2xpY2siLCJoYW5kbGVMaWtlQ2xpY2siLCJkZWxldGVDYXJkUG9wdXAiLCJzZXRTdWJtaXRBY3Rpb24iLCJ1c2VyIiwiaGFuZGxlUHJvZmlsZUVkaXRDbGljayIsIl9wb3B1cEZvcm0iLCJhY3Rpb24iLCJfaGFuZGxlQ29uZmlybSIsIl9oYW5kbGVTdWJtaXQiXSwic291cmNlUm9vdCI6IiJ9